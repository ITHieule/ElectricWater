package controllers

import (
	"errors"
	"net/http"
	"web-api/internal/api/services"
	"web-api/internal/pkg/models/request"
	"web-api/internal/pkg/models/response"

	"github.com/gin-gonic/gin"
)

type WaterController struct {
	*BaseController
}

var Water = &WaterController{}

func (c *WaterController) Getwater(ctx *gin.Context) {
	result, err := services.WaterRecord.WaterRecordSevice()
	if err != nil {
		// B·∫Øt l·ªói v√† tr·∫£ v·ªÅ th√¥ng b√°o chi ti·∫øt
		c.handleError(ctx, err)
		return
	}
	response.OkWithData(ctx, result)
}

func (c *WaterController) AddWaterRecords(ctx *gin.Context) {
	var requestParams request.Waterrequest

	// Ki·ªÉm tra v√† validate tham s·ªë y√™u c·∫ßu
	if err := c.ValidateReqParams(ctx, &requestParams); err != nil {
		c.handleError(ctx, err)
		return
	}
	result, err := services.WaterRecord.AddWaterRecordSevice(&requestParams)
	if err != nil {
		// B·∫Øt l·ªói khi th√™m b·∫£n ghi
		c.handleError(ctx, err)
		return
	}
	response.OkWithData(ctx, result)
}

func (c *WaterController) UpdateWaterRecords(ctx *gin.Context) {
	var requestParams request.Waterrequest

	// Ki·ªÉm tra v√† validate tham s·ªë y√™u c·∫ßu
	if err := c.ValidateReqParams(ctx, &requestParams); err != nil {
		c.handleError(ctx, err)
		return
	}
	result, err := services.WaterRecord.UpdateWaterRecordSevice(&requestParams)
	if err != nil {
		// B·∫Øt l·ªói khi c·∫≠p nh·∫≠t b·∫£n ghi
		c.handleError(ctx, err)
		return
	}
	response.OkWithData(ctx, result)
}

func (c *WaterController) DeleteWaterRecords(ctx *gin.Context) {
	var requestParams request.Waterrequest

	// üîπ Ki·ªÉm tra v√† validate tham s·ªë y√™u c·∫ßu t·ª´ body
	if err := c.ValidateReqParams(ctx, &requestParams); err != nil {
		c.handleError(ctx, err)
		return
	}

	// üîπ Ki·ªÉm tra RecordID c√≥ t·ªìn t·∫°i kh√¥ng
	if requestParams.RecordID == "" {
		c.handleError(ctx, errors.New("thi·∫øu RecordID, kh√¥ng th·ªÉ x√≥a"))
		return
	}

	// üîπ G·ªçi service ƒë·ªÉ x√≥a
	err := services.WaterRecord.DeleteWaterRecordSevice(requestParams.RecordID)
	if err != nil {
		c.handleError(ctx, err)
		return
	}

	// üîπ Tr·∫£ v·ªÅ response th√†nh c√¥ng
	response.OkWithData(ctx, nil)
}

func (c *WaterController) SearchWaterRecords(ctx *gin.Context) {
	var requestParams request.Waterrequest

	// Ki·ªÉm tra v√† validate tham s·ªë y√™u c·∫ßu
	if err := c.ValidateReqParams(ctx, &requestParams); err != nil {
		c.handleError(ctx, err)
		return
	}
	result, err := services.WaterRecord.SearchWaterRecordSevice(&requestParams)
	if err != nil {
		// B·∫Øt l·ªói khi t√¨m ki·∫øm b·∫£n ghi
		c.handleError(ctx, err)
		return
	}
	response.OkWithData(ctx, result)
}

func (c *WaterController) handleError(ctx *gin.Context, err error) {
	// Ki·ªÉm tra lo·∫°i l·ªói v√† x√°c ƒë·ªãnh m√£ tr·∫°ng th√°i HTTP ph√π h·ª£p
	switch err.Error() {
	case "kh√¥ng t√¨m th·∫•y b·∫£n ghi n√†o":
		response.FailWithDetailed(ctx, http.StatusNotFound, nil, err.Error())
	case "d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá", "thi·∫øu th√¥ng tin quan tr·ªçng":
		response.FailWithDetailed(ctx, http.StatusBadRequest, nil, err.Error())
	default:
		// Tr·∫£ v·ªÅ l·ªói th·∫≠t ƒë·ªÉ d·ªÖ debug
		response.FailWithDetailed(ctx, http.StatusInternalServerError, nil, err.Error())
	}
}
