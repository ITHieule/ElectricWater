package services

import (
	"errors"
	"fmt"
	"time"
	"web-api/internal/pkg/database"
	"web-api/internal/pkg/models/request"
	"web-api/internal/pkg/models/types"

	"github.com/go-sql-driver/mysql"
)

type WaterRecordsService struct {
	*BaseService
}

var WaterRecord = &WaterRecordsService{}

// üîπ L·∫•y to√†n b·ªô danh s√°ch WaterRecords
func (s *WaterRecordsService) WaterRecordSevice() ([]types.WaterRecords, error) {
	var records []types.WaterRecords

	// K·∫øt n·ªëi database
	db, err := database.ElectricWaterDBConnection()
	if err != nil {
		return nil, fmt.Errorf("l·ªói k·∫øt n·ªëi database: %w", err)
	}
	dbInstance, _ := db.DB()
	defer dbInstance.Close()

	// Th·ª±c hi·ªán truy v·∫•n
	query := `SELECT * FROM WaterRecords`
	err = db.Raw(query).Scan(&records).Error
	if err != nil {
		return nil, fmt.Errorf("l·ªói truy v·∫•n d·ªØ li·ªáu: %w", err)
	}

	return records, nil
}

// üîπ Th√™m m·ªôt b·∫£n ghi m·ªõi v√†o WaterRecords
func (s *WaterRecordsService) AddWaterRecordSevice(requestParams *request.Waterrequest) ([]types.WaterRecords, error) {
	var records []types.WaterRecords

	// Ki·ªÉm tra tham s·ªë ƒë·∫ßu v√†o
	if requestParams.FactoryID == "" || requestParams.RecordYear == 0 || requestParams.RecordMonth == 0 {
		return nil, errors.New("d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá, thi·∫øu FactoryID, RecordYear ho·∫∑c RecordMonth")
	}

	// T·∫°o RecordID theo format "W" + FactoryID + NƒÉm + Th√°ng
	recordID := fmt.Sprintf("W%s%d%02d", requestParams.FactoryID, requestParams.RecordYear, requestParams.RecordMonth)

	// Load m√∫i gi·ªù Vi·ªát Nam
	loc, _ := time.LoadLocation("Asia/Ho_Chi_Minh")
	currentTime := time.Now().In(loc)

	// K·∫øt n·ªëi database
	db, err := database.ElectricWaterDBConnection()
	if err != nil {
		return nil, fmt.Errorf("l·ªói k·∫øt n·ªëi database: %w", err)
	}
	dbInstance, _ := db.DB()
	defer dbInstance.Close()

	// üîπ Th·ª±c hi·ªán INSERT v√† x·ª≠ l√Ω l·ªói tr√πng RecordID
	query := `
		INSERT INTO WaterRecords (
			RecordID, FactoryID, RecordYear, RecordMonth, TapWaterMeter, RecycledWaterMeter, UserID, UserDate
		) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
	`
	result := db.Exec(query,
		recordID,
		requestParams.FactoryID,
		requestParams.RecordYear,
		requestParams.RecordMonth,
		requestParams.TapWaterMeter,
		requestParams.RecycledWaterMeter,
		requestParams.UserID,
		currentTime,
	)

	if result.Error != nil {
		// X·ª≠ l√Ω l·ªói Duplicate Entry (1062)
		if mysqlErr, ok := result.Error.(*mysql.MySQLError); ok && mysqlErr.Number == 1062 {
			return nil, fmt.Errorf("RecordID %s ƒë√£ t·ªìn t·∫°i, kh√¥ng th·ªÉ th√™m m·ªõi", recordID)
		}
		return nil, fmt.Errorf("l·ªói khi th√™m b·∫£n ghi: %w", result.Error)
	}
	if result.RowsAffected == 0 {
		return nil, errors.New("kh√¥ng c√≥ b·∫£n ghi n√†o ƒë∆∞·ª£c th√™m")
	}

	return records, nil
}

// üîπ C·∫≠p nh·∫≠t th√¥ng tin b·∫£n ghi WaterRecords
func (s *WaterRecordsService) UpdateWaterRecordSevice(requestParams *request.Waterrequest) ([]types.WaterRecords, error) {
	var records []types.WaterRecords

	// Ki·ªÉm tra tham s·ªë ƒë·∫ßu v√†o
	if requestParams.RecordID == "" {
		return nil, errors.New("thi·∫øu RecordID, kh√¥ng th·ªÉ c·∫≠p nh·∫≠t")
	}

	// üõ† Load m√∫i gi·ªù Vi·ªát Nam
	loc, _ := time.LoadLocation("Asia/Ho_Chi_Minh")
	currentTime := time.Now().In(loc).Format("2006-01-02 15:04:05") // üîπ ƒê·ªãnh d·∫°ng ph√π h·ª£p v·ªõi MySQL DATETIME

	// K·∫øt n·ªëi database
	db, err := database.ElectricWaterDBConnection()
	if err != nil {
		return nil, fmt.Errorf("l·ªói k·∫øt n·ªëi database: %w", err)
	}
	dbInstance, _ := db.DB()
	defer dbInstance.Close()

	// Ch·∫°y c√¢u l·ªánh UPDATE
	query := `
		UPDATE WaterRecords
		SET FactoryID = ?, RecordYear = ?, RecordMonth = ?, TapWaterMeter = ?, 
			RecycledWaterMeter = ?, UserID = ?, UserDate = ?
		WHERE RecordID = ?
	`
	result := db.Exec(query,
		requestParams.FactoryID,
		requestParams.RecordYear,
		requestParams.RecordMonth,
		requestParams.TapWaterMeter,
		requestParams.RecycledWaterMeter,
		requestParams.UserID,
		currentTime,
		requestParams.RecordID,
	)

	if result.Error != nil {
		return nil, fmt.Errorf("l·ªói khi c·∫≠p nh·∫≠t b·∫£n ghi: %w", result.Error)
	}
	if result.RowsAffected == 0 {
		return nil, errors.New("kh√¥ng t√¨m th·∫•y b·∫£n ghi ƒë·ªÉ c·∫≠p nh·∫≠t ho·∫∑c d·ªØ li·ªáu kh√¥ng thay ƒë·ªïi")
	}

	return records, nil
}

// üîπ X√≥a m·ªôt b·∫£n ghi theo RecordID
func (s *WaterRecordsService) DeleteWaterRecordSevice(RecordID string) error {
	if RecordID == "" {
		return errors.New("thi·∫øu RecordID, kh√¥ng th·ªÉ x√≥a")
	}

	// K·∫øt n·ªëi database
	db, err := database.ElectricWaterDBConnection()
	if err != nil {
		return fmt.Errorf("l·ªói k·∫øt n·ªëi database: %w", err)
	}
	dbInstance, _ := db.DB()
	defer dbInstance.Close()

	// Ch·∫°y c√¢u l·ªánh DELETE
	result := db.Exec("DELETE FROM WaterRecords WHERE RecordID = ?", RecordID)

	if result.Error != nil {
		return fmt.Errorf("l·ªói khi x√≥a b·∫£n ghi: %w", result.Error)
	}
	if result.RowsAffected == 0 {
		return fmt.Errorf("kh√¥ng t√¨m th·∫•y b·∫£n ghi v·ªõi ID %s ƒë·ªÉ x√≥a", RecordID)
	}

	return nil
}

// üîπ T√¨m ki·∫øm b·∫£n ghi theo ƒëi·ªÅu ki·ªán
func (s *WaterRecordsService) SearchWaterRecordSevice(requestParams *request.Waterrequest) ([]types.WaterRecords, error) {
	var records []types.WaterRecords

	// Ki·ªÉm tra tham s·ªë ƒë·∫ßu v√†o
	if requestParams.FactoryID == "" && requestParams.RecordYear == 0 && requestParams.RecordMonth == 0 && requestParams.UserID == "" {
		return nil, errors.New("c·∫ßn √≠t nh·∫•t m·ªôt ti√™u ch√≠ t√¨m ki·∫øm")
	}

	// K·∫øt n·ªëi database
	db, err := database.ElectricWaterDBConnection()
	if err != nil {
		return nil, fmt.Errorf("l·ªói k·∫øt n·ªëi database: %w", err)
	}
	dbInstance, _ := db.DB()
	defer dbInstance.Close()

	// X√¢y d·ª±ng c√¢u truy v·∫•n ƒë·ªông
	query := "SELECT * FROM WaterRecords WHERE 1=1"
	var queryParams []interface{}

	if requestParams.FactoryID != "" {
		query += " AND FactoryID = ?"
		queryParams = append(queryParams, requestParams.FactoryID)
	}
	if requestParams.RecordYear != 0 {
		query += " AND RecordYear = ?"
		queryParams = append(queryParams, requestParams.RecordYear)
	}
	if requestParams.RecordMonth != 0 {
		query += " AND RecordMonth = ?"
		queryParams = append(queryParams, requestParams.RecordMonth)
	}
	if requestParams.UserID != "" {
		query += " AND UserID = ?"
		queryParams = append(queryParams, requestParams.UserID)
	}

	// Th·ª±c hi·ªán truy v·∫•n
	err = db.Raw(query, queryParams...).Scan(&records).Error
	if err != nil {
		return nil, fmt.Errorf("l·ªói khi t√¨m ki·∫øm b·∫£n ghi: %w", err)
	}

	if len(records) == 0 {
		return nil, errors.New("kh√¥ng t√¨m th·∫•y b·∫£n ghi n√†o")
	}

	return records, nil
}
