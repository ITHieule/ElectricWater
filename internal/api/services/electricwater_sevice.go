package services

import (
	"fmt"
	"time"
	"web-api/internal/pkg/database"
	"web-api/internal/pkg/models/request"
	"web-api/internal/pkg/models/types"

	"github.com/go-sql-driver/mysql"
)

type ElectricWaterService struct {
	*BaseService
}

var Energy = &ElectricWaterService{}

func (s *ElectricWaterService) GetEnergySevice() ([]types.EnergyRecord, error) {
	var Ener []types.EnergyRecord

	// K·∫øt n·ªëi databaser
	db, err := database.ElectricWaterDBConnection()
	if err != nil {
		fmt.Println("Database connection error:", err)
		return nil, err
	}
	dbInstance, _ := db.DB()
	defer dbInstance.Close()

	// Truy v·∫•n SQL l·∫•y ng√†y ƒë·∫∑t h√†ng v√† t·ªïng s·ªë l∆∞·ª£ng s√°ch ƒë√£ b√°n
	query := `SELECT * FROM EnergyRecords`

	// Th·ª±c hi·ªán truy v·∫•n v√† √°nh x·∫° k·∫øt qu·∫£ v√†o struct
	if err := db.Raw(query).Scan(&Ener).Error; err != nil {
		fmt.Println("Query execution error:", err)
		return nil, err
	}

	// Ki·ªÉm tra k·∫øt qu·∫£ tr·∫£ v·ªÅ c√≥ d·ªØ li·ªáu hay kh√¥ng
	if len(Ener) == 0 {
		fmt.Println("No records found")
		return nil, fmt.Errorf("no records found")
	}

	return Ener, nil
}

func (s *ElectricWaterService) AddEnergySevice(requestParams *request.Energyrequest) ([]types.EnergyRecord, error) {
	var Ener []types.EnergyRecord

	// üõ† Debug ƒë·∫ßu v√†o
	fmt.Printf("üîç Request Params: %+v\n", requestParams)

	// üõ† T·∫°o RecordID theo format "W" + FactoryID + NƒÉm + Th√°ng
	recordID := fmt.Sprintf("E%s%d%02d", requestParams.FactoryID, requestParams.RecordYear, requestParams.RecordMonth)

	// üõ† Load m√∫i gi·ªù Vi·ªát Nam
	loc, _ := time.LoadLocation("Asia/Ho_Chi_Minh")
	currentTime := time.Now().In(loc).Format("2006-01-02 15:04:05") // üîπ ƒê·ªãnh d·∫°ng ph√π h·ª£p v·ªõi MySQL DATETIME

	// üõ† K·∫øt n·ªëi database
	db, err := database.ElectricWaterDBConnection()
	if err != nil {
		fmt.Println("‚ùå Database connection error:", err)
		return nil, err
	}
	dbInstance, _ := db.DB()
	defer dbInstance.Close()

	// üõ† Ki·ªÉm tra xem FactoryID c√≥ t·ªìn t·∫°i trong b·∫£ng Factories kh√¥ng
	var factoryCount int
	checkFactoryQuery := `SELECT COUNT(*) FROM Factories WHERE FactoryID = ?`
	if err := db.Raw(checkFactoryQuery, requestParams.FactoryID).Scan(&factoryCount).Error; err != nil {
		fmt.Println("‚ùå Error checking FactoryID:", err)
		return nil, err
	}

	if factoryCount == 0 {
		errMsg := fmt.Sprintf("‚ùå FactoryID '%s' kh√¥ng t·ªìn t·∫°i trong b·∫£ng Factories.", requestParams.FactoryID)
		fmt.Println(errMsg)
		return nil, fmt.Errorf(errMsg)
	}

	// üõ† Ki·ªÉm tra gi√° tr·ªã ƒë·∫ßu v√†o
	fmt.Printf("‚ö° GridElectricityMeter: %v, SolarEnergyMeter: %v\n", requestParams.GridElectricityMeter, requestParams.SolarEnergyMeter)

	// üõ† Ki·ªÉm tra xem RecordID ƒë√£ t·ªìn t·∫°i ch∆∞a (Tr√°nh l·ªói tr√πng kh√≥a)
	var existingCount int
	checkRecordQuery := `SELECT COUNT(*) FROM EnergyRecords WHERE RecordID = ?`
	if err := db.Raw(checkRecordQuery, recordID).Scan(&existingCount).Error; err != nil {
		fmt.Println("‚ùå Error checking existing RecordID:", err)
		return nil, err
	}

	if existingCount > 0 {
		errMsg := fmt.Sprintf("‚ùå RecordID '%s' ƒë√£ t·ªìn t·∫°i. Vui l√≤ng kh√¥ng th√™m tr√πng.", recordID)
		fmt.Println(errMsg)
		return nil, fmt.Errorf(errMsg)
	}

	// üõ† Th·ª±c hi·ªán truy v·∫•n INSERT
	query := `
        INSERT INTO EnergyRecords (
            RecordID, FactoryID, RecordYear, RecordMonth, GridElectricityMeter, 
            SolarEnergyMeter, UserID, UserDate
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
    `

	result := db.Exec(query,
		recordID,
		requestParams.FactoryID,
		requestParams.RecordYear,
		requestParams.RecordMonth,
		requestParams.GridElectricityMeter,
		requestParams.SolarEnergyMeter,
		requestParams.UserID,
		currentTime, // üîπ Chuy·ªÉn th√†nh chu·ªói "YYYY-MM-DD HH:MM:SS"
	)

	// üõ† Ki·ªÉm tra l·ªói truy v·∫•n
	if result.Error != nil {
		if mysqlErr, ok := result.Error.(*mysql.MySQLError); ok && mysqlErr.Number == 1062 {
			errMsg := fmt.Sprintf("‚ùå L·ªói tr√πng kh√≥a ch√≠nh: RecordID '%s' ƒë√£ t·ªìn t·∫°i.", recordID)
			fmt.Println(errMsg)
			return nil, fmt.Errorf(errMsg)
		}
		fmt.Println("‚ùå Query execution error:", result.Error)
		return nil, result.Error
	}

	// üõ† Ki·ªÉm tra xem c√≥ d·ªØ li·ªáu ƒë∆∞·ª£c th√™m kh√¥ng
	if result.RowsAffected == 0 {
		errMsg := "‚ùå Kh√¥ng c√≥ b·∫£n ghi n√†o ƒë∆∞·ª£c th√™m v√†o."
		fmt.Println(errMsg)
		return nil, fmt.Errorf(errMsg)
	}

	// üõ† L·∫•y d·ªØ li·ªáu v·ª´a th√™m t·ª´ database
	querySelect := `SELECT * FROM EnergyRecords WHERE RecordID = ?`
	if err := db.Raw(querySelect, recordID).Scan(&Ener).Error; err != nil {
		fmt.Println("‚ùå Error fetching inserted record:", err)
		return nil, err
	}

	fmt.Println("‚úÖ Th√™m d·ªØ li·ªáu th√†nh c√¥ng v√†o EnergyRecords!")
	return Ener, nil
}

func (s *ElectricWaterService) UpdateEnergySevice(requestParams *request.Energyrequest) ([]types.EnergyRecord, error) {
	var Ener []types.EnergyRecord

	// üõ† Ki·ªÉm tra xem RecordID c√≥ t·ªìn t·∫°i kh√¥ng
	var recordCount int
	db, err := database.ElectricWaterDBConnection()
	if err != nil {
		fmt.Println("‚ùå Database connection error:", err)
		return nil, err
	}
	dbInstance, _ := db.DB()
	defer dbInstance.Close()

	checkRecordQuery := `SELECT COUNT(*) FROM EnergyRecords WHERE RecordID = ?`
	if err := db.Raw(checkRecordQuery, requestParams.RecordID).Scan(&recordCount).Error; err != nil {
		fmt.Println("‚ùå Error checking RecordID:", err)
		return nil, err
	}

	if recordCount == 0 {
		errMsg := fmt.Sprintf("‚ùå RecordID '%s' kh√¥ng t·ªìn t·∫°i. Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t!", requestParams.RecordID)
		fmt.Println(errMsg)
		return nil, fmt.Errorf(errMsg)
	}

	// üõ† Load m√∫i gi·ªù Vi·ªát Nam
	loc, err := time.LoadLocation("Asia/Ho_Chi_Minh")
	if err != nil {
		fmt.Println("‚ùå Error loading time location:", err)
		return nil, err
	}
	currentTime := time.Now().In(loc).Format("2006-01-02 15:04:05") // üîπ ƒê·ªãnh d·∫°ng cho MySQL DATETIME

	// üõ† C·∫≠p nh·∫≠t d·ªØ li·ªáu
	query := `
		UPDATE EnergyRecords SET 
			FactoryID = ?, RecordYear = ?, RecordMonth = ?, 
			GridElectricityMeter = ?, SolarEnergyMeter = ?, 
			UserID = ?, UserDate = ?
		WHERE RecordID = ?
	`

	result := db.Exec(query,
		requestParams.FactoryID,
		requestParams.RecordYear,
		requestParams.RecordMonth,
		requestParams.GridElectricityMeter,
		requestParams.SolarEnergyMeter,
		requestParams.UserID,
		currentTime,
		requestParams.RecordID,
	)

	// üõ† Ki·ªÉm tra l·ªói truy v·∫•n
	if result.Error != nil {
		fmt.Println("‚ùå Query execution error:", result.Error)
		return nil, result.Error
	}

	// üõ† Ki·ªÉm tra xem c√≥ d·ªØ li·ªáu n√†o ƒë∆∞·ª£c c·∫≠p nh·∫≠t kh√¥ng
	if result.RowsAffected == 0 {
		errMsg := "‚ùå Kh√¥ng c√≥ b·∫£n ghi n√†o ƒë∆∞·ª£c c·∫≠p nh·∫≠t. C√≥ th·ªÉ d·ªØ li·ªáu kh√¥ng thay ƒë·ªïi!"
		fmt.Println(errMsg)
		return nil, fmt.Errorf(errMsg)
	}

	// üõ† L·∫•y d·ªØ li·ªáu v·ª´a c·∫≠p nh·∫≠t t·ª´ database
	querySelect := `SELECT * FROM EnergyRecords WHERE RecordID = ?`
	if err := db.Raw(querySelect, requestParams.RecordID).Scan(&Ener).Error; err != nil {
		fmt.Println("‚ùå Error fetching updated record:", err)
		return nil, err
	}

	fmt.Println("‚úÖ C·∫≠p nh·∫≠t d·ªØ li·ªáu th√†nh c√¥ng v√†o EnergyRecords!")
	return Ener, nil
}

func (s *ElectricWaterService) DeleteEnergySevice(RecordID string) error {
	// K·∫øt n·ªëi database
	db, err := database.ElectricWaterDBConnection()
	if err != nil {
		fmt.Println("Database connection error:", err)
		return err
	}
	dbInstance, _ := db.DB()
	defer dbInstance.Close()

	// Th·ª±c thi l·ªánh DELETE
	result := db.Exec("DELETE FROM EnergyRecords WHERE RecordID = ?", RecordID)

	// Ki·ªÉm tra l·ªói truy v·∫•n
	if result.Error != nil {
		fmt.Println("Query execution error:", result.Error)
		return result.Error
	}

	// Ki·ªÉm tra s·ªë d√≤ng b·ªã ·∫£nh h∆∞·ªüng
	if result.RowsAffected == 0 {
		fmt.Println("No EnergyRecords found with ID:", RecordID)
		return fmt.Errorf("no EnergyRecords found with ID %d", RecordID)
	}

	fmt.Println("Deleted EnergyRecords successfully!")
	return nil
}

func (s *ElectricWaterService) SearchEnergySevice(requestParams *request.Energyrequest) ([]types.EnergyRecord, error) {
	var Ener []types.EnergyRecord

	// K·∫øt n·ªëi database
	db, err := database.ElectricWaterDBConnection()
	if err != nil {
		fmt.Println("Database connection error:", err)
		return nil, err
	}
	dbInstance, _ := db.DB()
	defer dbInstance.Close()

	// Truy v·∫•n SQL
	if err := db.Raw("SELECT * FROM EnergyRecords WHERE FactoryID = ? OR RecordYear = ? OR RecordMonth = ? OR UserID = ?",
		requestParams.FactoryID,
		requestParams.RecordYear,
		requestParams.RecordMonth,
		requestParams.UserID).Scan(&Ener).Error; err != nil {
		fmt.Println("Query execution error:", err)
		return nil, err
	}

	// Ki·ªÉm tra k·∫øt qu·∫£ t√¨m ki·∫øm
	if len(Ener) == 0 {
		fmt.Println("No records found matching the search criteria")
		return nil, fmt.Errorf("no records found matching the search criteria")
	}

	return Ener, nil
}
